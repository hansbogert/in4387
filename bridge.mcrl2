sort  
    Sign_Status = struct on | off;
    PreSign  = struct P1 | P2 | P3 | P4;
    StopSign = struct S1 | S2 | S3 | S4;
    PreSigns = PreSign -> Sign_Status;
    StopSigns = StopSign -> Sign_Status;

    Barrier = struct B1 | B2 | B3 | B4;
    Barrier_Position = struct BarrierUp | BarrierDown;
    Barrier_Move = struct BarrierMoveUp | BarrierMoveDown;
    Barriers = Barrier -> Barrier_Position;

    Barrier_Sensor_Up = struct B1Up | B2Up | B3Up | B4Up;
    Barrier_Sensor_Down = struct B1Down | B2Down | B3Down | B4Down;
    Barrier_Sensor_Value = struct DetectBarrier | NoDetectBarrier;
    Barrier_Sensors_Up = Barrier_Sensor_Up -> Barrier_Sensor_Value;
    Barrier_Sensors_Down = Barrier_Sensor_Down -> Barrier_Sensor_Value;

    Lock = struct Locked | Unlocked; 
    Lock_Pin = struct L1 | L2;
    Lock_Pins = Lock_Pin -> Lock;

    Bridge_Move = struct BridgeMoveUp | BridgeMoveDown | BridgeMoveStop;
    Bridge_Position = struct BridgeUp | BridgeDown;

    Bridge_Brake = struct BrakeEngaged | BrakeDisEngaged;

    Bridge_Sensor_Up = struct BU1 | BU2;
    Bridge_Sensor_Down = struct BD1 | BD2;
    Bridge_Sensor_Value = struct DetectBridge | NoDetectBridge;
    Bridge_Sensors_Up = Bridge_Sensor_Up -> Bridge_Sensor_Value;
    Bridge_Sensors_Down = Bridge_Sensor_Down -> Bridge_Sensor_Value;
		
act driveway_open;

    proc_signs_stop_ready;
    proc_preSigns_switch: PreSign # Sign_Status;
    proc_stopSigns_switch: StopSign # Sign_Status;
    proc_stopSigns_turn_off;
    user_preSigns_switch: PreSign # Sign_Status;
    user_stopSigns_switch: StopSign # Sign_Status;
    comm_preSigns_switch: PreSign # Sign_Status;
    comm_stopSigns_switch: StopSign # Sign_Status;
    comm_stopSigns_on;
    comm_stopSigns_turn_off;

    proc_barrier_down, proc_barrier_up;
    proc_barrier_move: Barrier # Barrier_Position;
    user_barrier_move: Barrier # Barrier_Position;
    comm_barrier_move: Barrier # Barrier_Position;
    proc_barrier_change;
    comm_barrier_change;
    proc_barrier_change_to_sensor_up_change; 
    proc_barrier_change_to_sensor_down_change;

    proc_barrier_sensor_up_change, proc_barrier_sensor_down_change;
    comm_barrier_sensor_up_change, comm_barrier_sensor_down_change;

    sensor_barrier_up_value: Barrier_Sensor_Up # Barrier_Sensor_Value;
    proc_barrier_up_value: Barrier_Sensor_Up # Barrier_Sensor_Value;
    comm_barrier_up_value: Barrier_Sensor_Up # Barrier_Sensor_Value;
    sensor_barrier_down_value: Barrier_Sensor_Down # Barrier_Sensor_Value;
    proc_barrier_down_value: Barrier_Sensor_Down # Barrier_Sensor_Value;
    comm_barrier_down_value: Barrier_Sensor_Down # Barrier_Sensor_Value;
    proc_sensor_barrier_up_detect_barrier_up, proc_sensor_barrier_up_detect_barrier_down;
    proc_sensor_barrier_down_detect_barrier_up, proc_sensor_barrier_down_detect_barrier_down;

    proc_lock_pin_motor: Lock_Pin # Lock;
    user_lock_pin_motor: Lock_Pin # Lock;
    comm_lock_pin_motor: Lock_Pin # Lock;
    proc_lock_pins_change;
    comm_lock_pins_change;
    proc_lock_pins_change_to_locked;
    comm_lock_pins_change_to_locked;
    proc_lock_pins_unlocked;
    proc_lock_pins_locked;
    proc_lock_pins_unlocked_for_bridge_change;

    user_motor_action: Bridge_Move;
    proc_motor_action: Bridge_Move;
    comm_motor_action: Bridge_Move;
    proc_bridge_change, comm_bridge_change;
    proc_bridge_down_for_lockpins;
    proc_bridge_change_to_down, comm_bridge_change_to_down;   
    proc_bridge_change_to_up, comm_bridge_change_to_up;

    user_bridge_brake_action: Bridge_Brake;
    proc_bridge_brake_action: Bridge_Brake;
    comm_bridge_brake_action: Bridge_Brake;
    proc_bridge_brake_engaged;
    proc_bridge_brake_disengaged;
    proc_brake_change;
    comm_brake_change;

    sensor_bridge_sensor_up_action: Bridge_Sensor_Up # Bridge_Sensor_Value;
    proc_bridge_sensor_up_action: Bridge_Sensor_Up # Bridge_Sensor_Value;
    comm_bridge_sensor_up_action: Bridge_Sensor_Up # Bridge_Sensor_Value;
    sensor_bridge_sensor_down_action: Bridge_Sensor_Down # Bridge_Sensor_Value;
    proc_bridge_sensor_down_action: Bridge_Sensor_Down # Bridge_Sensor_Value;
    comm_bridge_sensor_down_action: Bridge_Sensor_Down # Bridge_Sensor_Value;

    proc_sensor_up_bridge_up, proc_sensor_up_bridge_down;
    proc_sensor_down_bridge_up, proc_sensor_down_bridge_down;
    proc_sensor_up_bridge_down_for_lockpins;
    proc_sensor_down_bridge_down_for_lockpins;
    proc_sensor_bridge_up_for_bridge_motor;
    proc_sensor_bridge_down_for_bridge_motor;

    proc_sensor_bridge_down;
    proc_sensor_bridge_up;
    proc_bridge_sensors;
    proc_bridge_sensors_change;
    comm_bridge_sensors_change;

    proc_bridge_change_for_sensors_up;
    proc_bridge_sensors_up_change;
    comm_bridge_sensors_up_change;
    proc_bridge_change_for_sensors_down;
    proc_bridge_sensors_down_change; 
    comm_bridge_sensors_down_change;
    
map initPreSigns : PreSign  -> Sign_Status;
    initStopSigns: StopSign -> Sign_Status;
    initLockPins: Lock_Pin -> Lock;
    initBarriers: Barrier -> Barrier_Position;
    initBridgeSensorsUp: Bridge_Sensor_Up -> Bridge_Sensor_Value;
    initBridgeSensorsDown: Bridge_Sensor_Down -> Bridge_Sensor_Value;
    initBarrierSensorsUp: Barrier_Sensor_Up -> Barrier_Sensor_Value;
    initBarrierSensorsDown: Barrier_Sensor_Down -> Barrier_Sensor_Value;
var 
    p: Lock_Pin;
    b: Barrier;
    bd: Bridge_Sensor_Down;
    bu: Bridge_Sensor_Up;
    bad: Barrier_Sensor_Down;
    bau: Barrier_Sensor_Up;
eqn initLockPins(p) = Locked;
    initBarriers(b) = BarrierUp;
    initBridgeSensorsDown(bd) = DetectBridge;
    initBridgeSensorsUp(bu) = NoDetectBridge;
    initBarrierSensorsUp(bau) = DetectBarrier;
    initBarrierSensorsDown(bad) = NoDetectBarrier;
    initPreSigns  = lambda x : PreSign  . off;
    initStopSigns = lambda x : StopSign . off;

proc
  LockPinMotors(motor: Lock_Pins) = 
  % proc_lock_pins_change beperkt de explosie van states door te zeggen dat lockpinnen alleen veranderd mogen worden als de barriers naar beneden zijn en de brug omlaag zijn
  % dit is te zien in de eerste comm voorwaarde 1
      proc_lock_pins_change . (
           sum l: Lock_Pin, s: Lock . (motor(l) != s) -> proc_lock_pin_motor(l, s) . LockPinMotors(motor[l->s]) 
         + LockPinMotors() )
      %sum l: Lock_Pin, s: Lock . (motor(l) != s) -> proc_lock_pins_change . ( ( proc_lock_pin_motor(l, s) . LockPinMotors(motor[l->s]) ) + LockPinMotors(motor) )
      + (forall l: Lock_Pin . motor(l) == Unlocked) -> (proc_lock_pins_unlocked + proc_lock_pins_unlocked_for_bridge_change ). LockPinMotors()
      + (forall l: Lock_Pin . motor(l) == Locked) -> proc_lock_pins_locked . LockPinMotors();

  BarrierProcess(bars: Barriers) =
  % proc_barrier_move_pins beperkt de explosie van states door te zeggen dat barriers alleen mogen bewegen als de lockpinnen gelocked zijn
  % dit is te zien in de eerste comm voorwaarde 5
      proc_barrier_change . (
  	sum b: Barrier, p:Barrier_Position . (bars(b) != p) -> proc_barrier_move(b, p) . BarrierProcess(bars[b->p])
         + (( proc_barrier_change_to_sensor_up_change + proc_barrier_change_to_sensor_down_change ) . BarrierProcess() ) + BarrierProcess() 
      ) 
      %sum b: Barrier, p:Barrier_Position . (bars(b) != p) -> proc_barrier_move(b, p) . proc_barrier_change . BarrierProcess(bars[b->p])
      + (forall b: Barrier . bars(b) == BarrierDown) -> proc_barrier_down . BarrierProcess()
      + (forall b: Barrier . bars(b) == BarrierUp) -> proc_barrier_up . BarrierProcess();

  BarrierSensorDown(BarSensDown: Barrier_Sensors_Down) =
      proc_barrier_sensor_down_change . ( 
            sum bd: Barrier_Sensor_Down, sd: Barrier_Sensor_Value . (BarSensDown(bd) != sd) -> proc_barrier_down_value(bd, sd) 
          . BarrierSensorDown(BarSensDown[bd->sd])
          + BarrierSensorDown() )
      + (forall bd: Barrier_Sensor_Down . BarSensDown(bd) == DetectBarrier) -> proc_sensor_barrier_down_detect_barrier_down . BarrierSensorDown()
      + (forall bd: Barrier_Sensor_Down . BarSensDown(bd) == NoDetectBarrier) -> proc_sensor_barrier_down_detect_barrier_up . BarrierSensorDown();

  BarrierSensorUp(barSensUp: Barrier_Sensors_Up) =
      proc_barrier_sensor_up_change . (
            sum bu: Barrier_Sensor_Up, su: Barrier_Sensor_Value . (barSensUp(bu) != su) -> proc_barrier_up_value(bu, su) 
          . BarrierSensorUp(barSensUp[bu->su])
          + BarrierSensorUp() )
      + (forall bu: Barrier_Sensor_Up . barSensUp(bu) == DetectBarrier) -> proc_sensor_barrier_up_detect_barrier_up . BarrierSensorUp()
      + (forall bu: Barrier_Sensor_Up . barSensUp(bu) == NoDetectBarrier) -> proc_sensor_barrier_up_detect_barrier_down . BarrierSensorUp();
 
  Bridge(position: Bridge_Position) =
      %simpele versie van de Bridge
      proc_bridge_change . (
        ((position == BridgeDown) -> proc_bridge_change_to_up . proc_motor_action(BridgeMoveUp) . proc_motor_action(BridgeMoveStop) . Bridge(BridgeUp))    
      + ((position == BridgeUp) -> proc_bridge_change_to_down . proc_motor_action(BridgeMoveDown) . proc_motor_action(BridgeMoveStop) . Bridge(BridgeDown))
      + ((proc_bridge_change_for_sensors_down + proc_bridge_change_for_sensors_up) . Bridge() ) + Bridge()
      )
      + (position == BridgeDown) -> proc_bridge_down_for_lockpins . Bridge();

  BridgeBrake(brake: Bridge_Brake) =
      proc_brake_change . ( 
        (sum bb: Bridge_Brake . (bb != brake) ->  proc_bridge_brake_action(bb) . BridgeBrake(bb))
      + BridgeBrake() )
      + (brake == BrakeDisEngaged) -> proc_bridge_brake_disengaged . BridgeBrake()
      + (brake == BrakeEngaged) ->  proc_bridge_brake_engaged . BridgeBrake();

  BridgeSensorUp(ups: Bridge_Sensors_Up) =
      proc_bridge_sensors_up_change . (
        sum bu: Bridge_Sensor_Up, su: Bridge_Sensor_Value . (ups(bu) != su) -> proc_bridge_sensor_up_action(bu, su). BridgeSensorUp(ups[bu->su])
      + BridgeSensorUp() )
      + ((ups(BU1) == DetectBridge) && (ups(BU2) == DetectBridge)) -> proc_sensor_up_bridge_up . BridgeSensorUp()
      + ((ups(BU1) == NoDetectBridge) && (ups(BU2) == NoDetectBridge)) -> (proc_sensor_up_bridge_down + proc_sensor_up_bridge_down_for_lockpins) . BridgeSensorUp();

  BridgeSensorDown(downs: Bridge_Sensors_Down) =
      proc_bridge_sensors_down_change . (
        sum bd: Bridge_Sensor_Down, sd: Bridge_Sensor_Value . (downs(bd) != sd) -> proc_bridge_sensor_down_action(bd, sd) . BridgeSensorDown(downs[bd->sd])
      + BridgeSensorDown() )
      + ((downs(BD1) == DetectBridge) && (downs(BD2) == DetectBridge)) -> (proc_sensor_down_bridge_down + proc_sensor_down_bridge_down_for_lockpins) . BridgeSensorDown()
      + ((downs(BD1) == NoDetectBridge) && (downs(BD2) == NoDetectBridge)) -> proc_sensor_down_bridge_up . BridgeSensorDown();

  Signs(preSigns: PreSigns, stopSigns: StopSigns) = 
        % als alle stopsigns uit staan, mogen de preSigns aan
        (forall s:StopSign . stopSigns(s) == off) -> 
          sum p: PreSign, st: Sign_Status . (preSigns(p) != st) -> proc_preSigns_switch(p, st) . Signs(preSigns[p->st], stopSigns)
        % De StopSigns mogen pas aan als alle PreSigns aan staan
      + (forall p: PreSign . preSigns(p) == on) -> 
          (sum s: StopSign . (stopSigns(s) == off) -> proc_stopSigns_switch(s, on) . Signs(preSigns, stopSigns[s->on]))
        % als alle StopSigns aanstaan, mogen de preSigns uit
      + (forall s: StopSign . stopSigns(s) == on) -> 
          (sum p: PreSign . (preSigns(p) == on) -> proc_preSigns_switch(p, off) . Signs(preSigns[p->off], stopSigns))
        % als alle stopsigns aanstaan en! alle presigns uit, dan zijn we in de speciale state waar de barriers omlaag zouden mogen 
      + (forall p: PreSign, s: StopSign  . preSigns(p) == off && stopSigns(s) == on) -> 
          proc_signs_stop_ready . Signs()
        % als de pre en stop signs uitstaan kunnen de auto's rijden 
      + (forall p: PreSign, s: StopSign  . preSigns(p) == off && stopSigns(s) == off) -> 
          driveway_open . Signs()   
        % als alle preSigns uit staan en de barriers staan omhoog dan mogen de stopSigns ook uit
      + (forall p: PreSign . preSigns(p) == off) ->
          (sum s: StopSign . (stopSigns(s) == on) -> proc_stopSigns_turn_off . proc_stopSigns_switch(s, off) . Signs(preSigns, stopSigns[s->off]));

  Sensors = 
      %alle sensoren kunnen op elk moment kapot zijn en een willekeurige waarde afgeven
        sum bd: Bridge_Sensor_Down, s: Bridge_Sensor_Value . sensor_bridge_sensor_down_action(bd, s) . Sensors
      + sum bu: Bridge_Sensor_Up, s: Bridge_Sensor_Value . sensor_bridge_sensor_up_action(bu, s) . Sensors
      + sum b: Barrier_Sensor_Down, s: Barrier_Sensor_Value . sensor_barrier_down_value(b, s) . Sensors
      + sum b: Barrier_Sensor_Up, s: Barrier_Sensor_Value . sensor_barrier_up_value(b, s) . Sensors;
      %De sensoren hebben maar 2 mogelijke waarden
      %  sensor_bridge_sensor_down_action(BD1, DetectBridge) . sensor_bridge_sensor_down_action(BD2, DetectBridge) .  sensor_bridge_sensor_up_action(BU1, NoDetectBridge) . sensor_bridge_sensor_up_action(BU2, NoDetectBridge) . Sensors
      %+ sensor_bridge_sensor_down_action(BD1, NoDetectBridge) . sensor_bridge_sensor_down_action(BD2, NoDetectBridge) . sensor_bridge_sensor_up_action(BU1, DetectBridge) . sensor_bridge_sensor_up_action(BU2, DetectBridge) . Sensors;


  User = 
      %de gebruiker kan altijd alle knoppen indrukken:
        sum p: PreSign, st: Sign_Status . user_preSigns_switch(p, st) . User
      + sum s: StopSign, st: Sign_Status . user_stopSigns_switch(s, st) . User
      + sum l: Lock_Pin, s: Lock . user_lock_pin_motor(l, s) . User
      + sum m: Bridge_Move . user_motor_action(m) . User      
      + sum b: Barrier, p: Barrier_Position . user_barrier_move(b, p) . User
      + sum bb: Bridge_Brake . user_bridge_brake_action(bb) . User;
      %de gebruiker kan een aantal knoppen indrukken:
      %sum bb: Bridge_Brake . user_bridge_brake_action(bb) . User  
      %+ user_lock_pin_motor(L1, Locked) . user_lock_pin_motor(L2, Locked) . User
      %+ user_lock_pin_motor(L1, Unlocked) . user_lock_pin_motor(L2, Unlocked) . User
      %+ user_motor_action(BridgeMoveUp) . user_motor_action(BridgeMoveStop) . User
      %+ user_motor_action(BridgeMoveDown) . user_motor_action(BridgeMoveStop) . User
      %de gebruiker heeft minimale bediening:
      %user_lock_pin_motor(L1, Unlocked) . user_lock_pin_motor(L2, Unlocked) . user_bridge_brake_action(BrakeDisEngaged)
      %. user_motor_action(BridgeMoveUp) . user_motor_action(BridgeMoveStop)
      %. user_motor_action(BridgeMoveDown) . user_motor_action(BridgeMoveStop)
      %. user_bridge_brake_action(BrakeEngaged) . user_lock_pin_motor(L1, Locked) . user_lock_pin_motor(L2, Locked) . User      
      %+ user_barrier_move(B1, BarrierDown) . user_barrier_move(B2, BarrierDown) . user_barrier_move(B3, BarrierDown) . user_barrier_move(B4, BarrierDown) . User
      %+ user_barrier_move(B1, BarrierUp) . user_barrier_move(B2, BarrierUp) . user_barrier_move(B3, BarrierUp) . user_barrier_move(B4, BarrierUp) . User;
     

init
  allow( { 
        comm_stopSigns_turn_off,
        comm_barrier_change, 
        comm_barrier_sensor_up_change,
        comm_barrier_sensor_down_change,
        comm_lock_pins_change,
        comm_brake_change,
        comm_bridge_change,
        comm_bridge_sensors_down_change,
        comm_bridge_sensors_up_change,
        comm_bridge_change_to_up,
        comm_bridge_change_to_down,
        
        comm_preSigns_switch,
        comm_stopSigns_switch,
        comm_lock_pin_motor,
        comm_motor_action,
        comm_barrier_move,
        comm_bridge_brake_action,

        comm_bridge_sensor_up_action,
        comm_bridge_sensor_down_action,
        comm_barrier_up_value,
        comm_barrier_down_value,

        driveway_open
    },
    comm(
      { %voorwaarde x: de stop signs mogen alleen worden uitgezet als de barriers omhoog staan
        proc_stopSigns_turn_off|proc_barrier_up|proc_sensor_barrier_down_detect_barrier_up|proc_sensor_barrier_up_detect_barrier_up -> comm_stopSigns_turn_off,
        %voorwaarde 0: de Barrier mogen pas omhoog zodra de Pinnen gelockt zijn
        proc_signs_stop_ready|proc_barrier_change|proc_lock_pins_locked -> comm_barrier_change,
        
        proc_barrier_sensor_up_change|proc_barrier_change_to_sensor_up_change -> comm_barrier_sensor_up_change,
        
        proc_barrier_sensor_down_change|proc_barrier_change_to_sensor_down_change -> comm_barrier_sensor_down_change,

        %voorwaarde 1: de lockpinnen mogen alleen veranderen van status als de brug en de barriers omlaag staan en de rem op de brug staat
        proc_lock_pins_change|proc_bridge_brake_engaged|proc_barrier_down|proc_sensor_up_bridge_down_for_lockpins|proc_sensor_down_bridge_down_for_lockpins
        |proc_bridge_down_for_lockpins|proc_sensor_barrier_down_detect_barrier_down|proc_sensor_barrier_up_detect_barrier_down -> comm_lock_pins_change,
        %voorwaarde 2: de rem mag alleen van status veranderen als de lockpinnen unlocked zijn.		
        proc_lock_pins_unlocked|proc_brake_change -> comm_brake_change,
        %voorwaarde 3: de brug mag alleen aangestuurd worden als de rem en de lockpinnen ontgrendeld zijn.
        proc_bridge_change|proc_bridge_brake_disengaged|proc_lock_pins_unlocked_for_bridge_change -> comm_bridge_change,
        %voorwaarde 4: De brug sensoren mogen alleen van status veranderen als de brug mag bewegen
        proc_bridge_change_for_sensors_down|proc_bridge_sensors_down_change -> comm_bridge_sensors_down_change,
        %voorwaarde 4: De brug sensoren mogen alleen van status veranderen als de brug mag bewegen
        proc_bridge_change_for_sensors_up|proc_bridge_sensors_up_change -> comm_bridge_sensors_up_change,
        %voorwaarde 5: de brug mag alleen omhoog worden gestuurd als deze momenteel beneden is.
        proc_sensor_down_bridge_down|proc_sensor_up_bridge_down|proc_bridge_change_to_up -> comm_bridge_change_to_up,
        %voorwaarde 6: de brug mag alleen omlaag worden gestuurd als deze momenteel boven is.
        proc_sensor_down_bridge_up|proc_sensor_up_bridge_up|proc_bridge_change_to_down -> comm_bridge_change_to_down,

        %user input
        user_preSigns_switch|proc_preSigns_switch -> comm_preSigns_switch,
        user_stopSigns_switch|proc_stopSigns_switch -> comm_stopSigns_switch,
        user_lock_pin_motor|proc_lock_pin_motor -> comm_lock_pin_motor,
        user_motor_action|proc_motor_action -> comm_motor_action,
        user_barrier_move|proc_barrier_move -> comm_barrier_move,
        user_bridge_brake_action|proc_bridge_brake_action -> comm_bridge_brake_action,

        %sensor input 
        sensor_bridge_sensor_up_action|proc_bridge_sensor_up_action -> comm_bridge_sensor_up_action,
        sensor_bridge_sensor_down_action|proc_bridge_sensor_down_action -> comm_bridge_sensor_down_action,
        sensor_barrier_up_value|proc_barrier_up_value -> comm_barrier_up_value,
        sensor_barrier_down_value|proc_barrier_down_value -> comm_barrier_down_value
      } , 
           Signs(initPreSigns,initStopSigns)
        || LockPinMotors(initLockPins) 
        || Bridge(BridgeDown) 
        || BarrierProcess(initBarriers) 
        || BridgeBrake(BrakeEngaged) 
        || BridgeSensorUp(initBridgeSensorsUp) 
        || BridgeSensorDown(initBridgeSensorsDown) 
        || BarrierSensorUp(initBarrierSensorsUp) 
        || BarrierSensorDown(initBarrierSensorsDown) 
        || Sensors 
        || User
  ) ) ;

