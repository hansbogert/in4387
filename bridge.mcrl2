sort  
    Sign_Status = struct on | off;
    PreSign  = struct P1 | P2 | P3 | P4;
    StopSign = struct S1 | S2 | S3 | S4;
    PreSigns = PreSign -> Sign_Status;
    StopSigns = StopSign -> Sign_Status;

    Barrier = struct B1 | B2 | B3 | B4;
    Barrier_Position = struct BarrierUp | BarrierDown;
    Barrier_Move = struct BarrierMoveUp | BarrierMoveDown;
    Barriers = Barrier -> Barrier_Position;

    Barrier_Sensor_Up = struct B1Up | B2Up | B3Up | B4Up;
    Barrier_Sensor_Down = struct B1Down | B2Down | B3Down | B4Down;
    Barrier_Sensor_Value = struct DetectBarrier | NoDetectBarrier;
    Barrier_Sensors_Up = Barrier_Sensor_Up -> Barrier_Sensor_Value;
    Barrier_Sensors_Down = Barrier_Sensor_Down -> Barrier_Sensor_Value;

    Lock = struct Locked | Unlocked; 
    Lock_Pin = struct L1 | L2;
    Lock_Pins = Lock_Pin -> Lock;

    Bridge_Move = struct BridgeMoveUp | BridgeMoveDown | BridgeMoveStop;
    Bridge_Position = struct BridgeUp | BridgeDown;

    Bridge_Brake = struct BrakeEngaged | BrakeDisEngaged;

    Bridge_Sensor_Up = struct BU1 | BU2;
    Bridge_Sensor_Down = struct BD1 | BD2;
    Bridge_Sensor_Value = struct DetectBridge | NoDetectBridge;
    Bridge_Sensors_Up = Bridge_Sensor_Up -> Bridge_Sensor_Value;
    Bridge_Sensors_Down = Bridge_Sensor_Down -> Bridge_Sensor_Value;
		
act driveway_open;

    proc_preSigns_switch: PreSign # Sign_Status;
    proc_stopSigns_switch: StopSign # Sign_Status;
    user_preSigns_switch: PreSign # Sign_Status;
    user_stopSigns_switch: StopSign # Sign_Status;
    comm_preSigns_switch: PreSign # Sign_Status;
    comm_stopSigns_switch: StopSign # Sign_Status;

    proc_barrier_move: Barrier # Barrier_Position;
    user_barrier_move: Barrier # Barrier_Position;
    comm_barrier_move: Barrier # Barrier_Position;

    sensor_barrier_up_value: Barrier_Sensor_Up # Barrier_Sensor_Value;
    proc_barrier_up_value: Barrier_Sensor_Up # Barrier_Sensor_Value;
    comm_barrier_up_value: Barrier_Sensor_Up # Barrier_Sensor_Value;
    sensor_barrier_down_value: Barrier_Sensor_Down # Barrier_Sensor_Value;
    proc_barrier_down_value: Barrier_Sensor_Down # Barrier_Sensor_Value;
    comm_barrier_down_value: Barrier_Sensor_Down # Barrier_Sensor_Value;

    proc_lock_pin_motor: Lock_Pin # Lock;
    user_lock_pin_motor: Lock_Pin # Lock;
    comm_lock_pin_motor: Lock_Pin # Lock;

    user_motor_action: Bridge_Move;
    proc_motor_action: Bridge_Move;
    comm_motor_action: Bridge_Move;

    user_bridge_brake_action: Bridge_Brake;
    proc_bridge_brake_action: Bridge_Brake;
    comm_bridge_brake_action: Bridge_Brake;

    sensor_bridge_sensor_up_action: Bridge_Sensor_Up # Bridge_Sensor_Value;
    proc_bridge_sensor_up_action: Bridge_Sensor_Up # Bridge_Sensor_Value;
    comm_bridge_sensor_up_action: Bridge_Sensor_Up # Bridge_Sensor_Value;
    sensor_bridge_sensor_down_action: Bridge_Sensor_Down # Bridge_Sensor_Value;
    proc_bridge_sensor_down_action: Bridge_Sensor_Down # Bridge_Sensor_Value;
    comm_bridge_sensor_down_action: Bridge_Sensor_Down # Bridge_Sensor_Value;

%communicatie actions:
    recv_stopSigns_turn_off, send_barrier_up, comm_stopSigns_turn_off;
    recv_barrier_change, send_signs_stop_ready, send_lock_pins_locked, comm_barrier_change;
    recv_lock_pins_change, send_barrier_down, comm_lock_pins_change;

%flags actions:
    flag_road_open;
    flag_all_pre_signs_off;
    flag_all_pre_signs_on;
    flag_all_stop_signs_off;
    flag_all_stop_signs_on;
    flag_all_barriers_down;
    flag_all_barriers_up;
    flag_all_lock_pins_unlocked;
    flag_all_lock_pins_locked;
    flag_brake_engaged;
    flag_brake_disengaged;
    flag_bridge_down;
    flag_bridge_up;
    
map 
    initPreSigns : PreSign  -> Sign_Status;
    initStopSigns: StopSign -> Sign_Status;
    initLockPins: Lock_Pin -> Lock;
    initBarriers: Barrier -> Barrier_Position;
    initBridgeSensorsUp: Bridge_Sensor_Up -> Bridge_Sensor_Value;
    initBridgeSensorsDown: Bridge_Sensor_Down -> Bridge_Sensor_Value;
    initBarrierSensorsUp: Barrier_Sensor_Up -> Barrier_Sensor_Value;
    initBarrierSensorsDown: Barrier_Sensor_Down -> Barrier_Sensor_Value;
var 
    p: Lock_Pin;
    b: Barrier;
    bd: Bridge_Sensor_Down;
    bu: Bridge_Sensor_Up;
    bad: Barrier_Sensor_Down;
    bau: Barrier_Sensor_Up;
eqn initLockPins(p) = Locked;
    initBarriers(b) = BarrierUp;
    initBridgeSensorsDown(bd) = DetectBridge;
    initBridgeSensorsUp(bu) = NoDetectBridge;
    initBarrierSensorsUp(bau) = DetectBarrier;
    initBarrierSensorsDown(bad) = NoDetectBarrier;
    initPreSigns  = lambda x : PreSign  . off;
    initStopSigns = lambda x : StopSign . off;

proc
  Signs(preSigns: PreSigns, stopSigns: StopSigns) = 
        % als alle stopsigns uit staan, mogen de preSigns aan
        (forall s:StopSign . stopSigns(s) == off) -> 
          (sum p: PreSign, st: Sign_Status . (preSigns(p) != st) -> proc_preSigns_switch(p, st) . Signs(preSigns[p->st], stopSigns)
        + flag_all_stop_signs_off . Signs())
        % De StopSigns mogen pas aan als alle PreSigns aan staan
      + (forall p: PreSign . preSigns(p) == on) -> 
          (sum s: StopSign . (stopSigns(s) == off) -> proc_stopSigns_switch(s, on) . Signs(preSigns, stopSigns[s->on])
        + flag_all_pre_signs_on . Signs())
        % als alle StopSigns aanstaan, mogen de preSigns uit
      + (forall s: StopSign . stopSigns(s) == on) -> 
          (sum p: PreSign . (preSigns(p) == on) -> proc_preSigns_switch(p, off) . Signs(preSigns[p->off], stopSigns)
        + flag_all_stop_signs_on . Signs())
        % als alle stopsigns aanstaan en! alle presigns uit, dan zijn we in de speciale state waar de barriers omlaag zouden mogen 
      + (forall p: PreSign, s: StopSign  . preSigns(p) == off && stopSigns(s) == on) -> 
          send_signs_stop_ready . Signs()
        % als alle preSigns uit staan en de barriers staan omhoog dan mogen de stopSigns ook uit
      + (forall p: PreSign . preSigns(p) == off) ->
          (recv_stopSigns_turn_off . ((sum s: StopSign . (stopSigns(s) == on) -> proc_stopSigns_switch(s, off) . Signs(preSigns, stopSigns[s->off])) + Signs())
        + flag_all_pre_signs_off . Signs())
        % als alle signs uit staan dan kan het verkeer rijden
      + (forall p: PreSign . preSigns(p) == off) ->
            (forall s:StopSign . stopSigns(s) == off) -> 
                flag_road_open . Signs()
      ;

  BarrierProcess(bars: Barriers, BarSensDown: Barrier_Sensors_Down, barSensUp: Barrier_Sensors_Up) =
  % proc_barrier_move_pins beperkt de explosie van states door te zeggen dat barriers alleen mogen bewegen als de lockpinnen gelocked zijn
  % dit is te zien in de eerste comm voorwaarde 5
      recv_barrier_change . (
           sum b: Barrier, p:Barrier_Position . (bars(b) != p) -> proc_barrier_move(b, p) . BarrierProcess(bars[b->p], BarSensDown, barSensUp)
         + sum bd: Barrier_Sensor_Down, sd: Barrier_Sensor_Value . (BarSensDown(bd) != sd) -> proc_barrier_down_value(bd, sd) 
           . BarrierProcess(bars, BarSensDown[bd->sd], barSensUp)
         + sum bu: Barrier_Sensor_Up, su: Barrier_Sensor_Value . (barSensUp(bu) != su) -> proc_barrier_up_value(bu, su) 
           . BarrierProcess(bars, BarSensDown, barSensUp[bu->su])
         + BarrierProcess() 
      ) 
      %sum b: Barrier, p:Barrier_Position . (bars(b) != p) -> proc_barrier_move(b, p) . proc_barrier_change . BarrierProcess(bars[b->p])
      + (forall b: Barrier . bars(b) == BarrierDown) -> 
            (forall bd: Barrier_Sensor_Down . BarSensDown(bd) == DetectBarrier) ->
                 (forall bu: Barrier_Sensor_Up . barSensUp(bu) == NoDetectBarrier) ->
                     (flag_all_barriers_down + send_barrier_down) . BarrierProcess()

      + (forall b: Barrier . bars(b) == BarrierUp) ->
            (forall bd: Barrier_Sensor_Down . BarSensDown(bd) == NoDetectBarrier) ->
                 (forall bu: Barrier_Sensor_Up . barSensUp(bu) == DetectBarrier) ->         
                     (flag_all_barriers_up + send_barrier_up) . BarrierProcess()
      ;

  Bridge(pins: Lock_Pins, brake: Bridge_Brake, motorstate: Bridge_Move, position: Bridge_Position, downs: Bridge_Sensors_Down, ups: Bridge_Sensors_Up) =
      %lockpins mogen veranderen als barriers omlaag staan, de brug omlaag staat en de brug rem erop staat
      recv_lock_pins_change . (
         (position == BridgeDown) ->
            ((downs(BD1) == DetectBridge) && (downs(BD2) == DetectBridge)) ->
                ((ups(BU1) == NoDetectBridge) && (ups(BU2) == NoDetectBridge)) ->
                    (brake == BrakeEngaged) ->
            	 sum l: Lock_Pin, s: Lock . (pins(l) != s) -> proc_lock_pin_motor(l, s) . Bridge(pins[l->s], brake, motorstate, position, downs, ups) 
          + Bridge() 
      )
      %de bridge brake mag van status veranderen als de lockpinnen unlocked zijn
      + (forall l: Lock_Pin . pins(l) == Unlocked) ->
            ((motorstate!=BridgeMoveUp) && (motorstate!=BridgeMoveDown)) ->
                sum bb: Bridge_Brake . (bb != brake) ->  proc_bridge_brake_action(bb) . Bridge(pins, bb, motorstate, position, downs, ups)
      %de brug sensoren en motor mag veranderen als de rem van de brug af is
      + (brake == BrakeDisEngaged) -> (
           ((position == BridgeDown) && (motorstate!=BridgeMoveDown)) ->
               ((downs(BD1) == DetectBridge) && (downs(BD2) == DetectBridge)) ->
                   ((ups(BU1) == NoDetectBridge) && (ups(BU2) == NoDetectBridge)) ->
                       proc_motor_action(BridgeMoveUp) . Bridge(pins, brake, BridgeMoveUp, BridgeUp, downs, ups)  
         + ((position == BridgeUp) && (motorstate!=BridgeMoveUp)) ->
               ((downs(BD1) == NoDetectBridge) && (downs(BD2) == NoDetectBridge)) ->
                   ((ups(BU1) == DetectBridge) && (ups(BU2) == DetectBridge)) ->  
                       proc_motor_action(BridgeMoveDown) . Bridge(pins, brake, BridgeMoveDown, BridgeDown, downs, ups)
         + (motorstate!=BridgeMoveStop) -> proc_motor_action(BridgeMoveStop) . Bridge(pins, brake, BridgeMoveStop, position, downs, ups)
         + sum bu: Bridge_Sensor_Up, su: Bridge_Sensor_Value . (ups(bu) != su) -> proc_bridge_sensor_up_action(bu, su). Bridge(pins, brake, motorstate, position, downs, ups[bu->su])
         + sum bd: Bridge_Sensor_Down, sd: Bridge_Sensor_Value . (downs(bd) != sd) -> proc_bridge_sensor_down_action(bd, sd) . Bridge(pins, brake, motorstate, position, downs[bd->sd], ups)         
      )
      %de vlaggetjes voor u-calculus
      + (forall l: Lock_Pin . pins(l) == Unlocked) -> flag_all_lock_pins_unlocked . Bridge()
      + (forall l: Lock_Pin . pins(l) == Locked) -> (flag_all_lock_pins_locked + send_lock_pins_locked) . Bridge()
      + (brake == BrakeDisEngaged) -> flag_brake_disengaged . Bridge()
      + (brake == BrakeEngaged) -> flag_brake_engaged . Bridge()
      + (position == BridgeDown) ->
            ((downs(BD1) == DetectBridge) && (downs(BD2) == DetectBridge)) ->
                ((ups(BU1) == NoDetectBridge) && (ups(BU2) == NoDetectBridge)) ->
                    flag_bridge_down . Bridge()
      + (position == BridgeUp) ->
            ((downs(BD1) == NoDetectBridge) && (downs(BD2) == NoDetectBridge)) ->
                ((ups(BU1) == DetectBridge) && (ups(BU2) == DetectBridge)) ->
                    flag_bridge_up . Bridge()
      ; 

  Sensors = 
      %alle sensoren kunnen op elk moment kapot zijn en een willekeurige waarde afgeven
      %  sum bd: Bridge_Sensor_Down, s: Bridge_Sensor_Value . sensor_bridge_sensor_down_action(bd, s) . Sensors
      %+ sum bu: Bridge_Sensor_Up, s: Bridge_Sensor_Value . sensor_bridge_sensor_up_action(bu, s) . Sensors
      %+ sum b: Barrier_Sensor_Down, s: Barrier_Sensor_Value . sensor_barrier_down_value(b, s) . Sensors
      %+ sum b: Barrier_Sensor_Up, s: Barrier_Sensor_Value . sensor_barrier_up_value(b, s) . Sensors
      %De sensoren kunnnen alleen in groepen in en uitgeschakeld worden
        sensor_bridge_sensor_down_action(BD1, DetectBridge) . sensor_bridge_sensor_down_action(BD2, DetectBridge) . sensor_bridge_sensor_up_action(BU1, NoDetectBridge) . sensor_bridge_sensor_up_action(BU2, NoDetectBridge) . Sensors
      + sensor_bridge_sensor_down_action(BD1, NoDetectBridge) . sensor_bridge_sensor_down_action(BD2, NoDetectBridge) . sensor_bridge_sensor_up_action(BU1, DetectBridge) . sensor_bridge_sensor_up_action(BU2, DetectBridge) . Sensors
      + sensor_barrier_down_value(B1Down, DetectBarrier) . sensor_barrier_down_value(B2Down, DetectBarrier) . sensor_barrier_down_value(B3Down, DetectBarrier) . sensor_barrier_down_value(B4Down, DetectBarrier) . Sensors
      + sensor_barrier_down_value(B1Down, NoDetectBarrier) . sensor_barrier_down_value(B2Down, NoDetectBarrier) . sensor_barrier_down_value(B3Down, NoDetectBarrier) . sensor_barrier_down_value(B4Down, NoDetectBarrier) . Sensors
      + sensor_barrier_up_value(B1Up, DetectBarrier) . sensor_barrier_up_value(B2Up, DetectBarrier) . sensor_barrier_up_value(B3Up, DetectBarrier) . sensor_barrier_up_value(B4Up, DetectBarrier) . Sensors
      + sensor_barrier_up_value(B1Up, NoDetectBarrier) . sensor_barrier_up_value(B2Up, NoDetectBarrier) . sensor_barrier_up_value(B3Up, NoDetectBarrier) . sensor_barrier_up_value(B4Up, NoDetectBarrier) . Sensors
      ;

  User = 
      %de gebruiker kan altijd alle knoppen indrukken:
      %  sum p: PreSign, st: Sign_Status . user_preSigns_switch(p, st) . User
      %+ sum s: StopSign, st: Sign_Status . user_stopSigns_switch(s, st) . User
      %+ sum l: Lock_Pin, s: Lock . user_lock_pin_motor(l, s) . User
      %+ sum m: Bridge_Move . user_motor_action(m) . User      
      %+ sum b: Barrier, p: Barrier_Position . user_barrier_move(b, p) . User
      %+ sum bb: Bridge_Brake . user_bridge_brake_action(bb) . User
      %de gebruiker heeft minimale bediening:
        sum bb: Bridge_Brake . user_bridge_brake_action(bb) . User  
      + user_preSigns_switch(P1, on) . user_preSigns_switch(P2, on) . user_preSigns_switch(P3, on) . user_preSigns_switch(P4, on) . User
      + user_preSigns_switch(P1, off) . user_preSigns_switch(P2, off) . user_preSigns_switch(P3, off) . user_preSigns_switch(P4, off) . User
      + user_stopSigns_switch(S1, on) . user_stopSigns_switch(S2, on) . user_stopSigns_switch(S3, on) . user_stopSigns_switch(S4, on) . User
      + user_stopSigns_switch(S1, off) . user_stopSigns_switch(S2, off) . user_stopSigns_switch(S3, off) . user_stopSigns_switch(S4, off) . User
      + user_lock_pin_motor(L1, Locked) . user_lock_pin_motor(L2, Locked) . User
      + user_lock_pin_motor(L1, Unlocked) . user_lock_pin_motor(L2, Unlocked) . User
      + user_motor_action(BridgeMoveUp) . user_motor_action(BridgeMoveStop) . User
      + user_motor_action(BridgeMoveDown) . user_motor_action(BridgeMoveStop) . User
      + user_barrier_move(B1, BarrierDown) . user_barrier_move(B2, BarrierDown) . user_barrier_move(B3, BarrierDown) . user_barrier_move(B4, BarrierDown) . User
      + user_barrier_move(B1, BarrierUp) . user_barrier_move(B2, BarrierUp) . user_barrier_move(B3, BarrierUp) . user_barrier_move(B4, BarrierUp) . User
      ;      

init
  allow( {
        %system parralisation 
        comm_stopSigns_turn_off,
        comm_barrier_change, 
        comm_lock_pins_change,
        
        %user input
        comm_preSigns_switch,
        comm_stopSigns_switch,
        comm_lock_pin_motor,
        comm_motor_action,
        comm_barrier_move,
        comm_bridge_brake_action,
        
        %sensor input 
        comm_bridge_sensor_up_action,
        comm_bridge_sensor_down_action,
        comm_barrier_up_value,
        comm_barrier_down_value,

        %mcf flags
        flag_road_open,
        flag_all_pre_signs_off,
        flag_all_pre_signs_on,
        flag_all_stop_signs_off,
        flag_all_stop_signs_on,
        flag_all_barriers_down,
        flag_all_barriers_up,
        flag_all_lock_pins_unlocked,
        flag_all_lock_pins_locked,
        flag_brake_engaged,
        flag_brake_disengaged,
        flag_bridge_down,
        flag_bridge_up    
    },
    comm(
      { %voorwaarde x: de stop signs mogen alleen worden uitgezet als de barriers omhoog staan
        recv_stopSigns_turn_off|send_barrier_up -> comm_stopSigns_turn_off,
        %voorwaarde 0: de Barrier mogen pas omhoog zodra de Pinnen gelockt zijn
        recv_barrier_change|send_signs_stop_ready|send_lock_pins_locked -> comm_barrier_change,        
        %voorwaarde 1: de lockpinnen mogen alleen veranderen van status als de brug en de barriers omlaag staan en de rem op de brug staat
        recv_lock_pins_change|send_barrier_down -> comm_lock_pins_change,

        %user input
        user_preSigns_switch|proc_preSigns_switch -> comm_preSigns_switch,
        user_stopSigns_switch|proc_stopSigns_switch -> comm_stopSigns_switch,
        user_lock_pin_motor|proc_lock_pin_motor -> comm_lock_pin_motor,
        user_motor_action|proc_motor_action -> comm_motor_action,
        user_barrier_move|proc_barrier_move -> comm_barrier_move,
        user_bridge_brake_action|proc_bridge_brake_action -> comm_bridge_brake_action,

        %sensor input 
        sensor_bridge_sensor_up_action|proc_bridge_sensor_up_action -> comm_bridge_sensor_up_action,
        sensor_bridge_sensor_down_action|proc_bridge_sensor_down_action -> comm_bridge_sensor_down_action,
        sensor_barrier_up_value|proc_barrier_up_value -> comm_barrier_up_value,
        sensor_barrier_down_value|proc_barrier_down_value -> comm_barrier_down_value
      } , 
           Signs(initPreSigns, initStopSigns)
        || Bridge(initLockPins, BrakeEngaged, BridgeMoveStop, BridgeDown, initBridgeSensorsDown, initBridgeSensorsUp) 
        || BarrierProcess(initBarriers, initBarrierSensorsDown, initBarrierSensorsUp) 
        || Sensors 
        || User
  ) ) ;

