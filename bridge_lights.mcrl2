%% system definitions
act doPreSignsOn;
act doPreSignsOff;

act doStopSignsOn;
act doStopSignsOff;



%% UIController definitions
act UISetPreSignsOn;
act UISetPreSignsOff;
act UISetStopSignsOn;
act UISetStopSignsOff;


%% Process representing the UI-controller
%  The UI-controller can send sequences of actions which tells the bridge to undertake something.
proc UIController = 
      UISetPreSignsOn . UIController
    + UISetPreSignsOff . UIController
    + UISetStopSignsOn . UIController
    + UISetStopSignsOff . UIController

;


%% Lights definitions
sort PreSign = struct P0 | P1 | P2 | P3;
sort StopSign = struct S0 | S1 | S2 | S3;
sort Status = struct on | off;
sort StopSignStatus = StopSign -> Status;
sort PreSignStatus = PreSign -> Status;

act setPreSign: PreSign # Status;
act readPreSign: PreSign;
act setStopSign: StopSign # Status;
act readStopSign: StopSign;

act setPreSignsOn;
act setPreSignsOff;
act preSignsOn;
act preSignsOff;

act setStopSignsOn;
act setStopSignsOff;
act stopSignsOn;
act stopSignsOff;

map setAllOffP: PreSign -> Status;
map setAllOffS: StopSign -> Status;
var p: PreSign;
    s: StopSign;
eqn setAllOffP(p) = off;
    setAllOffS(s) = off;

map setAllOnP: PreSign -> Status;
var p: PreSign;
eqn setAllOnP(p) = on;

map setAllOnS: StopSign -> Status;
var s: StopSign;
eqn setAllOnS(s) = on;


%% Get corresponding Sx of Px
map corrP: StopSign -> PreSign;
eqn corrP(S0) = P0;
    corrP(S1) = P1;
    corrP(S2) = P2;
    corrP(S3) = P3; 

%% Process representing the light controller
%proc Lights(ss: StopSignStatus, ps: PreSignStatus) = 
proc Lights(ss: StopSignStatus, ps: PreSignStatus) = 
    %   sum p: PreSign, l: Status . (l != ps(p)) -> setPreSign(p, l) . Lights(ss, ps[p->l])
    % + sum p: PreSign . readPreSign(p) . Lights()
    % + sum s: StopSign, l: Status . ((l != ss(s)) && ps(corrP(s)) == on ) -> setStopSign(s, l) . Lights(ss[s->l], ps)
    % + sum s: StopSign . readStopSign(s) . Lights()
    % + (forall s: PreSign . ps(s) == on) -> preSignsOn . Lights()
    % ;
    %% we should be able to turn on pre signs always.
    (forall p: PreSign . ps(p) == off) -> (
        setPreSignsOn
      . setPreSign(P0,on)
      . setPreSign(P1,on)
      . setPreSign(P2,on)
      . setPreSign(P3,on)
      . preSignsOn
      . Lights(ss, setAllOnP)
    )
  + (forall p: PreSign . ps(p) == on ) -> (
        setPreSignsOff
      . setPreSign(P0,off)
      . setPreSign(P1,off)
      . setPreSign(P2,off)
      . setPreSign(P3,off)
      . preSignsOff
      . Lights(ss, setAllOffP)
      
      + setStopSignsOn
      . setStopSign(S0,on)
      . setStopSign(S1,on)
      . setStopSign(S2,on)
      . setStopSign(S3,on)
      . stopSignsOn
      . Lights(setAllOnS, ps)
    )
  + (forall s: StopSign . ss(s) == on) -> (
        setStopSignsOff
      . setStopSign(S0,off)
      . setStopSign(S1,off)
      . setStopSign(S2,off)
      . setStopSign(S3,off)
      . stopSignsOff
      . Lights(setAllOffS, ps) 
    )
;

   

%% Initially the lights are all off.
init
    hide( {setPreSign, setStopSign},
        allow(
            { doPreSignsOn, doPreSignsOff, doStopSignsOn, doStopSignsOff
            , preSignsOn, preSignsOff, stopSignsOn, stopSignsOff 
            , setPreSign, setStopSign }
          , comm( 
                { UISetPreSignsOn|setPreSignsOn ->doPreSignsOn
                , UISetPreSignsOff|setPreSignsOff->doPreSignsOff 
                , UISetStopSignsOn|setStopSignsOn->doStopSignsOn
                , UISetStopSignsOff|setStopSignsOff->doStopSignsOff
                }
            ,   Lights(setAllOffS, setAllOffP) 
             || UIController
            )
        )
    );